{"version":3,"sources":["domain/components/terminal/commands/@cls/index.ts","domain/components/terminal/commands/@help/index.ts","domain/components/terminal/commands/@contact/index.ts","domain/components/terminal/commands/@experiences/index.ts","domain/components/terminal/commands/@skills/index.ts","domain/components/terminal/commands/@picture/index.ts","domain/components/terminal/commands/@bio/index.ts","domain/components/terminal/commands/commands.ts","domain/components/terminal/index.tsx","domain/views/app/index.tsx","reportWebVitals.ts","index.tsx"],"names":["cls","description","execute","args","kwargs","stdout","setStdout","a","name","help","maxSize","Object","values","commands","map","cmd","sort","b","length","repeat","join","contact","lines","experiences","skills","picture","content","kind","bio","Terminal","props","rootRef","useRef","inputRef","useState","promptLabel","React","useMemo","useEffect","s","welcomeMessage","isEcho","div","document","getElementById","scrollTop","scrollHeight","clientHeight","pushToStd","command","result","handledCommandResponse","handleCommandResponse","handleInput","e","current","key","preventDefault","minimist","value","_","renderContent","COLORS_REG","nextContent","regexifyString","pattern","decorator","match","index","m","split","filter","v","href","target","rel","style","color","input","ref","className","id","line","src","width","height","centered","pixelSize","Fragment","c","id2","onKeyDown","type","autoComplete","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5d3ddd32.chunk.js","sourcesContent":["import { ICommand } from \"../../types\";\n\nconst cls: ICommand = {\n    description: \"Clear the screen\",\n    execute: async (args, kwargs, stdout, setStdout) => {\n        setStdout([]);\n        return null;\n    },\n    name: \"cls\",\n};\n\nexport default cls;\n","import { ICommand } from \"../../types\";\n\nimport commands from '../commands';\n\nconst help: ICommand = {\n    description: \"Show this message\",\n    execute: async (args, kwargs, stdout, setStdout) => {\n        const maxSize = Object.values(commands)\n            .map(cmd => cmd.name)\n            .sort((a, b) => b.length - a.length)[0].length;\n        \n        return Object.values(commands)\n            .map(cmd => `{#FFCB6B}${cmd.name}{/#FFCB6B}${\" \".repeat(maxSize - cmd.name.length)} - ${cmd.description}`)\n            .join('\\n');\n    },\n    name: \"help\",\n};\n\nexport default help;\n","import { ICommand } from \"../../types\";\n\nconst contact: ICommand = {\n    description: \"Show my contact\",\n    execute: async (args, kwargs, stdout, setStdout) => {\n        const lines: Array<string> = [\n            \"{#C778C1}* Name:{/#C778C1} ARTISIEN Nathan\",\n            \"{#C778C1}* E-Mail:{/#C778C1} nathan.artisien@gmail.com\",\n            \"{#C778C1}* Phone:{/#C778C1} (+33) 06.47.48.02.85\",\n            \"{#C778C1}* LinkedIn:{/#C778C1} {link}https://www.linkedin.com/in/nathan-artisien/{/link}\",\n            \"{#C778C1}* Github:{/#C778C1} {link}https://github.com/Eoniz/{/link}\",\n            \"{#C778C1}* Website:{/#C778C1} {link}https://nathan-artisien.me/{/link}\",\n        ];\n\n        return lines.join(\"\\n\");\n    },\n    name: \"contact\",\n};\n\nexport default contact;\n","import { ICommand } from \"../../types\";\n\nconst experiences: ICommand = {\n    description: \"Show my experiences\",\n    execute: async (args, kwargs, stdout, setStdout) => {\n        const lines: Array<string> = [\n            \"{#C778C1}* Orness (March 2019 -> Today):{/#C778C1}\",\n            \"  - I was a consultant for Société Générale\",\n            \"  - I worked on https://dojo.codes (v1) as frontend dev, and actually working on v2. Orness organized a dev event on this website with ~150 participants at the same time (more info here: https://www.linkedin.com/feed/update/urn:li:activity:6793112284517437441/ )\",\n            \"\",\n            \"{#C778C1}* Société Générale (March 2019 -> Today):{/#C778C1}\",\n            \"  - I was FullStack developer\",\n            \"  - I Realized APIs using {#FFCB6B}Python (3.6/3.7){/#FFCB6B} and {#FFCB6B}FastAPI{/#FFCB6B}\",\n            \"  - I Realized Frontends using {#FFCB6B}JavaScript/TypeScript{/#FFCB6B} and {#FFCB6B}React{/#FFCB6B} ((Functionnal || Class) Components) with {#FFCB6B}Redux{/#FFCB6B}\",\n            \"  - Deployments using our deployment stack (CI/CD using {#FFCB6B}Jenkins{/#FFCB6B}, {#FFCB6B}Docker{/#FFCB6B} and {#FFCB6B}Github{/#FFCB6B})\",\n            \"  - Supports on projects (ours, and also legacy projects in {#FFCB6B}VBA{/#FFCB6B})\",\n            \"  - Our team worked using Agile Method\",\n            \"\",\n            \"{#C778C1}* Side Projects:{/#C778C1}\",\n            \"  - All my side projects are in my github: {link}https://github.com/Eoniz/{/link}\"\n        ];\n\n        return lines.join(\"\\n\");\n    },\n    name: \"experiences\",\n};\n\nexport default experiences;\n","import { ICommand } from \"../../types\";\n\nconst skills: ICommand = {\n    description: \"Show my skills\",\n    execute: async (args, kwargs, stdout, setStdout) => {\n        const lines: Array<string> = [\n            \"{#C778C1}* Frontend:{/#C778C1}\",\n            \"  - Languages: JavaScript / TypeScript\",\n            \"  - Frameworks: React with Redux\",\n            \"  - Styling: Sass / Css / MaterialUI / Bootstrap\",\n            \"\",\n            \"{#C778C1}* Backend:{/#C778C1}\",\n            \"  - Languages: Python / JavaScript / TypeScript\",\n            \"  - Frameworks: FastAPI / NodeJS\",\n            \"\",\n            \"{#C778C1}* General:{/#C778C1}\",\n            \"  - Git / Github\",\n            \"  - TDD / Domain Driven Design\",\n            \"  - Agile Method\",\n            \"  - Figma / Illustrator\",\n            \"  - Github Actions\",\n            \"\",\n            \"{#C778C1}* Other:{/#C778C1}\",\n            \"  - Discord.JS ( {link}https://discord.js.org/{/link} )\",\n        ];\n\n        return lines.join(\"\\n\");\n    },\n    name: \"skills\",\n};\n\nexport default skills;\n","import { ICommand } from \"../../types\";\n\nconst picture: ICommand = {\n    description: \"Show my head :)\",\n    execute: async (args, kwargs, stdout, setStdout) => {\n        return {\n            content: \"https://media-exp1.licdn.com/dms/image/C4D03AQF9UWWRM8bNJg/profile-displayphoto-shrink_200_200/0/1570990655948?e=1628726400&v=beta&t=Hbdy2WCN8lhNWJTCy-lOdfdSEuXncKYpjskVzFPI-ps\",\n            kind: \"img\"\n        }\n    },\n    name: \"picture\",\n};\n\nexport default picture;\n","import { ICommand } from \"../../types\";\n\nconst bio: ICommand = {\n    description: \"Show my bio\",\n    execute: async (args, kwargs, stdout, setStdout) => {\n        const lines: Array<string> = [\n            \"Hello !\",\n            \"My name is Nathan, and I am from {#C778C1}Paris, France{/#C778C1}.\",\n            \"I'm currently working as a {#FFCB6B}Full stack Developer{/#FFCB6B} at {#C778C1}Orness and Société Générale{/#C778C1}.\",\n            \"I have been working 2 years with {#FFCB6B}Python{/#FFCB6B}, {#FFCB6B}FastAPI{/#FFCB6B}, {#FFCB6B}React{/#FFCB6B}, {#FFCB6B}Redux{/#FFCB6B}, {#FFCB6B}TypeScript{/#FFCB6B} and {#FFCB6B}JavaScript{/#FFCB6B} with a focus on {#FFCB6B}APIs{/#FFCB6B} and {#FFCB6B}FrontEnds{/#FFCB6B}.\",\n            \"I enjoy reading, learning new stuff and globally, the crypto world and the tech world :)\",\n            \"Feel free to {#FFCB6B}contact me{/#FFCB6B} ! I will be glad to discuss with you !\"\n        ];\n\n        return lines.join(\"\\n\");\n    },\n    name: \"bio\",\n};\n\nexport default bio;\n","import { ICommand } from \"../types\";\nimport cls from \"./@cls\";\nimport help from \"./@help\";\nimport contact from \"./@contact\";\nimport experiences from \"./@experiences\";\nimport skills from \"./@skills\";\nimport picture from \"./@picture\";\nimport bio from \"./@bio\";\n\nconst commands: Record<string, ICommand> = {\n    [cls.name]: cls,\n    [help.name]: help,\n    [bio.name]: bio,\n    [contact.name]: contact,\n    [experiences.name]: experiences,\n    [skills.name]: skills,\n    [picture.name]: picture,\n};\n\nexport default commands;\n","import React, { useRef, useState } from 'react'\nimport { ICommand, ICommandResult, IStdLine } from './types';\n\n// @ts-ignore\nimport minimist from \"minimist-string\";\nimport { ImagePixelated } from \"react-pixelate\"\nimport regexifyString from 'regexify-string';\n\ninterface IProps {\n    promptLabel?: string;\n    commands?: Record<string, ICommand>;\n    welcomeMessage?: string;\n}\n\nconst Terminal = (props: IProps) => {\n    const rootRef = useRef(null);\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const [stdout, setStdout] = useState<Array<IStdLine>>([]);\n    \n    const promptLabel = React.useMemo<string>(() => {\n        return props.promptLabel || '$';\n    }, [props.promptLabel]);\n\n    React.useEffect(() => {\n        setStdout((s: Array<IStdLine>) => {\n            if (!props.welcomeMessage) {\n                return s;\n            }\n\n            const nextStdout: Array<IStdLine> = [\n                ...s,\n                {\n                    kind: \"string\",\n                    content: props.welcomeMessage,\n                    isEcho: false\n                }\n            ];\n            return nextStdout;\n        });\n    }, [props.welcomeMessage]);\n\n    React.useEffect(() => {\n        const div = document.getElementById(\"terminal-content\");\n        if (div) {\n            div.scrollTop = div.scrollHeight - div.clientHeight;\n        }\n    }, [stdout]);\n\n    const pushToStd = (command: string, result: ICommandResult) => {\n        const handledCommandResponse = handleCommandResponse(result);\n        \n        setStdout([\n            ...stdout,\n            {\n                content: command,\n                isEcho: true,\n                kind: \"string\"\n            },\n            handledCommandResponse\n        ]);\n    };\n\n    const handleCommandResponse = (result: ICommandResult): IStdLine => {\n        if (typeof(result) === \"string\") {\n            return {\n                content: result,\n                isEcho: false,\n                kind: \"string\"\n            }\n        }\n\n        return {\n            content: result.content,\n            kind: result.kind,\n            isEcho: false,\n        }\n    }\n\n    const handleInput = async (e: React.KeyboardEvent) => {\n        if (!inputRef.current) {\n            return;\n        }\n\n        if (e.key === \"Enter\") {\n            e.preventDefault();\n            \n            const { _: args, ...kwargs } = minimist(inputRef.current.value);\n\n            if (props.commands) {\n                if (args[0] in props.commands) {\n                    const command = props.commands[args[0]];\n                    const result = await command.execute(\n                        args, \n                        kwargs, \n                        stdout,\n                        setStdout\n                    );\n\n                    if (result) {\n                        pushToStd(inputRef.current.value, result);\n                    }\n                } else {\n                    pushToStd(inputRef.current.value, `command \"${args[0]}\" does not exist.`);\n                }\n            }\n\n\n            inputRef.current.value = \"\";\n\n            return;\n        }\n    };\n\n    const renderContent = (content: string) => {\n        const COLORS_REG = /{(.*?)}(.*?){\\/(.*?)}/g;\n        const nextContent = regexifyString({\n            pattern: COLORS_REG,\n            decorator: (match, index) => {\n                const m = match.split(COLORS_REG).filter(v => v !== \"\");\n                if (m[0] === \"link\") {\n                    return (\n                        <a \n                            href={m[1]}\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            { m[1] }\n                        </a>\n                    );\n                }\n\n                return <span style={{ color: m[0] }}>{m[1]}</span>;\n            },\n            input: content\n        });\n        \n        return <span>{nextContent}</span>;\n    };\n\n    const getStdout = () => {\n        return stdout.map((line, id) => {\n            if (line.isEcho) {\n                return (\n                    <div key={id} className=\"line\">\n                        <span\n                            className=\"prompt-label\"\n                        >\n                            { promptLabel }\n                        </span>\n                        {\n                            line.content\n                        }\n                    </div>\n                )\n            }\n\n            if (line.kind === \"img\") {\n                return (\n                    <div key={id} className=\"line\">\n                        <ImagePixelated\n                            src={line.content} \n                            width={200}\n                            height={200}\n                            centered\n                            pixelSize={4}\n                        />\n                    </div>\n                )\n            }\n\n            return (\n                <React.Fragment key={id}>\n                    {\n                        line.content\n                            .split('\\n')\n                            .map((c, id2) => (\n                                <div key={`${id}-${id2}`} className=\"line\">\n                                    { renderContent(c) }\n                                </div>\n                            ))\n                    }\n                </React.Fragment>\n            )\n        });\n    }\n    \n    return (\n        <div\n            ref={rootRef}\n            className=\"terminal\"\n        >\n            <div\n                className=\"content\"\n                id=\"terminal-content\"\n            >\n                {getStdout()}\n                <div\n                    className=\"input-area\"\n                >\n                    <span\n                        className={\"prompt-label\"}\n                    >\n                        { promptLabel }\n                    </span>\n                    <input\n                        ref={inputRef}\n                        name='terminal-input'\n                        className=\"terminal-input\"\n                        onKeyDown={handleInput}\n                        type='text'\n                        autoComplete='off'\n                    />\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Terminal;\n","import React from 'react';\n\nimport commands from '../../components/terminal/commands/commands';\nimport Terminal from '../../components/terminal';\n\nconst welcomeMessage = `\n*********************************************************************************************************\n*   ____  ____  _______ ____ _____ ____   _____  ___         ___    ____  ______  __ __   ____  ____    *                                                  \n*  /    ||    \\\\|       ||    / ___/|    ||   __]|    \\\\      |   \\\\  /    ||      ||  |  | /    ||    \\\\   *                                                      \n*  |  o  ||  D  )      | |  (   \\\\_  |  | |  [_  |  _  |    |  _  ||  o  ||      ||  |  ||  o  ||  _  |  *                                                   \n*  |     ||    /|_|  |_| |  |\\\\__  | |  | |   _] |  |  |    |  |  ||     ||_|  |_||  _  ||     ||  |  |  *                                                   \n*  |  _  ||    \\\\  |  |   |  |/  \\\\ | |  | | [__  |  |  |    |  |  ||  _  |  |  |  |  |  ||  _  ||  |  |  *                                                    \n*  |  |  ||  .  \\\\ |  |   |  |\\\\    | |  | |    | |  |  |    |  |  ||  |  |  |  |  |  |  ||  |  ||  |  |  *                                                    \n*  |__|__||__|\\\\_| |__|  |____|\\\\___||____||____| |__|__|    |__|__||__|__|  |__|  |__|__||__|__||__|__|  *\n*********************************************************************************************************                                                  \n\nWelcome to my resume.\nHere, you'll find anything about me. To start, you can type \"help\" :)\n`;\n\nconst App = () => {\n    return (\n        <div className=\"root\">\n            <Terminal\n                promptLabel=\"me@resume:~$ \"\n                commands={commands}\n                welcomeMessage={welcomeMessage}\n            />\n        </div>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './domain/views/app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}